import React, { useState, useEffect, useRef } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  TouchableOpacity, 
  Dimensions,
  ScrollView,
  TextInput,
  Platform,
  Alert
} from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import MapView, { Marker, PROVIDER_GOOGLE, Circle } from 'react-native-maps';
import { useAppStore } from '../src/store/appStore';
import { campusLocations } from '../src/services/campusDataService';
import { Location } from '../src/store/appStore';
import { 
  requestLocationPermissions, 
  getCurrentLocation,
  watchUserLocation,
  DEFAULT_CAMPUS_LOCATION,
  UserLocation
} from '../src/services/locationService';
import { getNearbyLocations, formatDistance } from '../src/services/nearbyLocationsService';

export default function MapScreen() {
  const { language } = useAppStore();
  const [searchQuery, setSearchQuery] = useState('');
  const [showInfoPanel, setShowInfoPanel] = useState(true);
  const [mode, setMode] = useState<'outdoor' | 'indoor'>('outdoor');
  const [selectedFloor, setSelectedFloor] = useState(1);
  const [region, setRegion] = useState(DEFAULT_CAMPUS_LOCATION);
  const [userLocation, setUserLocation] = useState<UserLocation | null>(null);
  const [locationPermission, setLocationPermission] = useState<'granted' | 'denied' | 'undetermined'>('undetermined');
  const [isLocationLoading, setIsLocationLoading] = useState(true);
  
  // Reference to the map component
  const mapRef = useRef<MapView>(null);
  // Initialize location tracking when component mounts
  useEffect(() => {
    let locationWatcher: (() => void) | null = null;
    
    const initializeLocation = async () => {
      try {
        setIsLocationLoading(true);
        
        // Request location permissions
        const permissionStatus = await requestLocationPermissions();
        setLocationPermission(permissionStatus);
        
        if (permissionStatus === 'granted') {
          // Get initial location
          const initialLocation = await getCurrentLocation();
          
          if (initialLocation) {
            setUserLocation(initialLocation);
            
            // Update map region to center on user's location
            setRegion({
              latitude: initialLocation.latitude,
              longitude: initialLocation.longitude,
              latitudeDelta: 0.005,
              longitudeDelta: 0.005,
            });
            
            // Start watching location changes
            locationWatcher = watchUserLocation(
              (location) => {
                setUserLocation(location);
              },
              (error) => {
                console.error('Location watching error:', error);
              }
            );
          }
        } else if (permissionStatus === 'denied') {
          Alert.alert(
            language === 'en' ? 'Location Access Required' : 'स्थान पहुंच आवश्यक है',
            language === 'en' 
              ? 'NaviCampus needs access to your location to provide navigation services.' 
              : 'नेविकैंपस को नेविगेशन सेवाएं प्रदान करने के लिए आपके स्थान तक पहुंच की आवश्यकता है।'
          );
        }
      } catch (error) {
        console.error('Error initializing location:', error);
      } finally {
        setIsLocationLoading(false);
      }
    };
    
    initializeLocation();
    
    // Clean up location watcher when component unmounts
    return () => {
      if (locationWatcher) {
        locationWatcher();
      }
    };
  }, [language]);
  
  // Function to center map on user's current location
  const centerOnUserLocation = () => {
    if (userLocation && mapRef.current) {
      mapRef.current.animateToRegion({
        latitude: userLocation.latitude,
        longitude: userLocation.longitude,
        latitudeDelta: 0.002,
        longitudeDelta: 0.002,
      }, 500);
    } else if (!userLocation && locationPermission !== 'granted') {
      // If location permission isn't granted, prompt the user
      requestLocationPermissions().then(status => {
        setLocationPermission(status);
      });
    }
  };

  // Function to toggle between outdoor and indoor mode  // Function to calculate distances for nearby locations and sort them
  const getNearbyLocations = () => {
    if (!userLocation) {
      // If no user location, return first 5 locations unsorted
      return campusLocations.slice(0, 5);
    }
    
    // Calculate distance for each location from user's position
    const locationsWithDistance = campusLocations.map(location => {
      const distance = calculateDistance(
        userLocation.latitude,
        userLocation.longitude,
        location.coordinates.latitude,
        location.coordinates.longitude
      );
      
      return {
        ...location,
        distance
      };
    });
    
    // Sort by distance (closest first) and take top 5
    return locationsWithDistance
      .sort((a, b) => a.distance - b.distance)
      .slice(0, 5);
  };

  const toggleMode = () => {
    setMode(mode === 'outdoor' ? 'indoor' : 'outdoor');
  };
  
  // Function to get nearby locations sorted by distance from user
  const getNearbyLocations = () => {
    if (!userLocation) {
      // If no user location, return first 5 locations unsorted
      return campusLocations.slice(0, 5);
    }
    
    // Calculate distance for each location from user's position
    const locationsWithDistance = campusLocations.map(location => {
      const distance = calculateDistance(
        userLocation.latitude,
        userLocation.longitude,
        location.coordinates.latitude,
        location.coordinates.longitude
      );
      
      return {
        ...location,
        distance
      };
    });
    
    // Sort by distance (closest first) and take top 5
    return locationsWithDistance
      .sort((a, b) => a.distance - b.distance)
      .slice(0, 5);
  };

  // Create a type for locations with distance information
  interface LocationWithDistance extends Location {
    distance?: number;
  }

  // Function to get nearby locations sorted by distance from user
  const getNearbyLocations = (): LocationWithDistance[] => {
    if (!userLocation) {
      // If no user location, return first 5 locations unsorted
      return campusLocations.slice(0, 5);
    }
    
    // Calculate distance for each location from user's position
    const locationsWithDistance = campusLocations.map(location => {
      const distance = calculateDistance(
        userLocation.latitude,
        userLocation.longitude,
        location.coordinates.latitude,
        location.coordinates.longitude
      );
      
      return {
        ...location,
        distance
      };
    });
    
    // Sort by distance (closest first) and take top 5
    return locationsWithDistance
      .sort((a, b) => (a.distance || Infinity) - (b.distance || Infinity))
      .slice(0, 5);
  };
  
  const handleSearch = () => {
    if (searchQuery.trim()) {
      // For the demo, we'll just alert the search query
      Alert.alert(
        language === 'en' ? 'Search' : 'खोज',
        `${language === 'en' ? 'Searching for:' : 'के लिए खोज रहे हैं:'} ${searchQuery}`
      );
      // Clear search query
      setSearchQuery('');
    }
  };
  
  const navigateToLocation = (id: string) => {
    // Navigate to location with id parameter
    router.push({
      pathname: "/location/[id]",
      params: { id }
    } as any);
  };

  // Indoor map component that will replace the MapView when in indoor mode
  const IndoorMapView = () => {
    return (
      <View style={styles.mapContainer}>
        <View style={styles.mapPlaceholder}>
          <Text style={styles.mapPlaceholderText}>Indoor Map</Text>
          <Ionicons name="business" size={64} color="#A1A1AA" />
          <Text style={styles.mapPlaceholderSubtext}>
            {language === 'en' 
              ? 'Indoor mapping using Wi-Fi positioning' 
              : 'वाई-फाई पोजिशनिंग का उपयोग करके इनडोर मैपिंग'}
          </Text>
        </View>
        
        {/* Floor selector */}
        <View style={styles.floorSelector}>
          <TouchableOpacity 
            style={[
              styles.floorButton, 
              selectedFloor === 3 && styles.floorButtonActive
            ]}
            onPress={() => setSelectedFloor(3)}
          >
            <Text style={[
              styles.floorButtonText,
              selectedFloor === 3 && styles.floorButtonTextActive
            ]}>3F</Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={[
              styles.floorButton, 
              selectedFloor === 2 && styles.floorButtonActive
            ]}
            onPress={() => setSelectedFloor(2)}
          >
            <Text style={[
              styles.floorButtonText,
              selectedFloor === 2 && styles.floorButtonTextActive
            ]}>2F</Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={[
              styles.floorButton, 
              selectedFloor === 1 && styles.floorButtonActive
            ]}
            onPress={() => setSelectedFloor(1)}
          >
            <Text style={[
              styles.floorButtonText,
              selectedFloor === 1 && styles.floorButtonTextActive
            ]}>1F</Text>
          </TouchableOpacity>
          <TouchableOpacity 
            style={[
              styles.floorButton, 
              selectedFloor === 0 && styles.floorButtonActive
            ]}
            onPress={() => setSelectedFloor(0)}
          >
            <Text style={[
              styles.floorButtonText,
              selectedFloor === 0 && styles.floorButtonTextActive
            ]}>G</Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  };
  
  return (
    <View style={styles.container}>
      <StatusBar style="dark" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <Ionicons name="arrow-back" size={24} color="#000" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>
          {language === 'en' ? 'Campus Map' : 'कैंपस का नक्शा'}
        </Text>
        <TouchableOpacity style={styles.modeToggleButton} onPress={toggleMode}>
          <Ionicons 
            name={mode === 'outdoor' ? "business" : "earth"} 
            size={24} 
            color="#3B82F6" 
          />
        </TouchableOpacity>
      </View>
      
      {/* Search Bar */}
      <View style={styles.searchContainer}>
        <Ionicons name="search" size={20} color="#6B7280" style={styles.searchIcon} />
        <TextInput
          style={styles.searchInput}
          placeholder={language === 'en' ? "Search locations..." : "स्थान खोजें..."}
          value={searchQuery}
          onChangeText={setSearchQuery}
          onSubmitEditing={handleSearch}
          returnKeyType="search"
        />
        {searchQuery.length > 0 && (
          <TouchableOpacity 
            style={styles.clearButton}
            onPress={() => setSearchQuery('')}
          >
            <Ionicons name="close-circle" size={20} color="#A1A1AA" />
          </TouchableOpacity>
        )}
      </View>
      
      {/* Map View - Conditionally render based on mode */}
      {mode === 'outdoor' ? (
        <View style={styles.mapContainer}>
          <MapView 
            ref={mapRef}
            style={styles.map}
            provider={PROVIDER_GOOGLE}
            initialRegion={region}
            showsUserLocation={locationPermission === 'granted'}
            showsMyLocationButton={false} // We'll use our own button
            followsUserLocation={locationPermission === 'granted'}
          >
            {/* Display campus location markers */}
            {campusLocations.map((location) => (
              <Marker
                key={location.id}
                coordinate={{
                  latitude: location.coordinates.latitude,
                  longitude: location.coordinates.longitude,
                }}
                title={location.name}
                description={location.description}
                onPress={() => navigateToLocation(location.id)}
              />
            ))}
            
            {/* Display user location with accuracy radius */}
            {userLocation && (
              <Circle
                center={{
                  latitude: userLocation.latitude,
                  longitude: userLocation.longitude,
                }}
                radius={userLocation.accuracy || 10}
                fillColor="rgba(66, 133, 244, 0.2)"
                strokeColor="rgba(66, 133, 244, 0.5)"
                strokeWidth={1}
              />
            )}
          </MapView>
          
          {/* Location loading indicator */}
          {isLocationLoading && (
            <View style={styles.loadingOverlay}>
              <Text style={styles.loadingText}>
                {language === 'en' 
                  ? 'Locating you...' 
                  : 'आपका पता लगा रहा है...'}
              </Text>
            </View>
          )}
            {/* Map controls */}
          <View style={styles.mapControls}>
            {/* My Location button */}
            <TouchableOpacity
              style={styles.mapControlButton}
              onPress={centerOnUserLocation}
            >
              <Ionicons 
                name="locate" 
                size={24} 
                color={userLocation ? "#4F46E5" : "#6B7280"} 
              />
            </TouchableOpacity>
            <TouchableOpacity 
              style={styles.mapControlButton}
              onPress={() => setRegion({...region})}
            >
              <Ionicons name="locate" size={24} color="#3B82F6" />
            </TouchableOpacity>
            <TouchableOpacity style={styles.mapControlButton}>
              <Ionicons name="compass" size={24} color="#3B82F6" />
            </TouchableOpacity>
            <TouchableOpacity 
              style={styles.mapControlButton}
              onPress={() => setRegion({
                ...region,
                latitudeDelta: region.latitudeDelta / 1.5,
                longitudeDelta: region.longitudeDelta / 1.5,
              })}
            >
              <Ionicons name="add" size={24} color="#3B82F6" />
            </TouchableOpacity>
            <TouchableOpacity 
              style={styles.mapControlButton}
              onPress={() => setRegion({
                ...region,
                latitudeDelta: region.latitudeDelta * 1.5,
                longitudeDelta: region.longitudeDelta * 1.5,
              })}
            >
              <Ionicons name="remove" size={24} color="#3B82F6" />
            </TouchableOpacity>
          </View>
        </View>
      ) : (
        <IndoorMapView />
      )}
      
      {/* Bottom Information Panel */}
      {showInfoPanel && (
        <View style={styles.infoPanel}>
          <View style={styles.infoPanelHeader}>
            <Text style={styles.infoPanelTitle}>
              {language === 'en' ? 'Nearby Locations' : 'आस-पास के स्थान'}
            </Text>
            <TouchableOpacity onPress={() => setShowInfoPanel(false)}>
              <Ionicons name="chevron-down" size={20} color="#6B7280" />
            </TouchableOpacity>
          </View>
            <ScrollView 
            horizontal
            showsHorizontalScrollIndicator={false}
            style={styles.nearbyLocationsScroll}
            contentContainerStyle={styles.nearbyLocationsContent}
          >
            {getNearbyLocations().map((location) => (
              <TouchableOpacity 
                key={location.id}
                style={styles.locationCard}
                onPress={() => navigateToLocation(location.id)}
              >
                <View style={styles.locationIconContainer}>
                  <Ionicons 
                    name={
                      location.type === 'classroom' ? 'school' :
                      location.type === 'lab' ? 'flask' :
                      location.type === 'office' ? 'business' :
                      location.type === 'library' ? 'library' :
                      location.type === 'cafeteria' ? 'restaurant' : 'location'
                    } 
                    size={24} 
                    color="#4F46E5" 
                  />
                </View>
                <Text style={styles.locationName} numberOfLines={1}>
                  {location.name}
                </Text>
                <Text style={styles.locationDistance} numberOfLines={1}>
                  {/* Display actual distance if available, otherwise show a placeholder */}
                  {location.distance 
                    ? location.distance < 1000 
                      ? `${Math.round(location.distance)}m` 
                      : `${(location.distance / 1000).toFixed(1)}km`
                    : '--'}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
          
          <View style={styles.navigationInfo}>
            <View style={styles.navigationInfoIcon}>
              <Ionicons name="navigate" size={24} color="#FFFFFF" />
            </View>
            <View style={styles.navigationInfoTextContainer}>
              <Text style={styles.navigationInfoTitle}>
                {language === 'en' ? 'Wi-Fi Based Indoor Navigation' : 'वाईफाई आधारित इनडोर नेविगेशन'}
              </Text>
              <Text style={styles.navigationInfoDescription}>
                {language === 'en' 
                  ? 'Enable Wi-Fi for precise indoor navigation' 
                  : 'सटीक इनडोर नेविगेशन के लिए वाईफाई सक्षम करें'}
              </Text>
            </View>
            <TouchableOpacity style={styles.navigationInfoButton}>
              <Text style={styles.navigationInfoButtonText}>
                {language === 'en' ? 'Enable' : 'सक्षम करें'}
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      )}
      
      {/* Button to expand panel when collapsed */}
      {!showInfoPanel && (
        <TouchableOpacity 
          style={styles.expandButton}
          onPress={() => setShowInfoPanel(true)}
        >
          <Ionicons name="chevron-up" size={20} color="#FFFFFF" />
        </TouchableOpacity>
      )}
    </View>
  );
}

const { width, height } = Dimensions.get('window');

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F7FA',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingTop: Platform.OS === 'ios' ? 60 : 40,
    paddingBottom: 12,
    backgroundColor: '#FFFFFF',
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    flex: 1,
    fontSize: 18,
    fontWeight: 'bold',
    color: '#111827',
    textAlign: 'center',
  },
  modeToggleButton: {
    padding: 8,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    margin: 16,
    marginTop: 8,
    borderRadius: 8,
    paddingHorizontal: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 1,
    elevation: 2,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  searchIcon: {
    marginRight: 8,
  },
  searchInput: {
    flex: 1,
    height: 44,
    fontSize: 16,
    color: '#111827',
  },
  clearButton: {
    padding: 4,
  },
  mapContainer: {
    flex: 1,
    position: 'relative',
  },
  map: {
    ...StyleSheet.absoluteFillObject,
  },
  mapPlaceholder: {
    flex: 1,
    backgroundColor: '#E5E7EB',
    justifyContent: 'center',
    alignItems: 'center',
  },
  mapPlaceholderText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#6B7280',
    marginBottom: 12,
  },
  mapPlaceholderSubtext: {
    fontSize: 14,
    color: '#6B7280',
    textAlign: 'center',
    paddingHorizontal: 40,
    marginTop: 12,
  },
  floorSelector: {
    position: 'absolute',
    top: 20,
    right: 20,
    backgroundColor: '#FFFFFF',
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 4,
  },
  floorButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  floorButtonActive: {
    backgroundColor: '#3B82F6',
  },
  floorButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#4B5563',
  },
  floorButtonTextActive: {
    color: '#FFFFFF',
  },  loadingOverlay: {
    position: 'absolute',
    top: 70,
    alignSelf: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    borderRadius: 20,
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  loadingText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '500',
  },
  mapControls: {
    position: 'absolute',
    bottom: 150,
    right: 20,
    backgroundColor: '#FFFFFF',
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 4,
  },
  mapControlButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  infoPanel: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
    paddingVertical: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: -2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 8,
    maxHeight: height * 0.4,
  },
  infoPanelHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    marginBottom: 16,
  },
  infoPanelTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#111827',
  },
  nearbyLocationsScroll: {
    marginBottom: 16,
  },
  nearbyLocationsContent: {
    paddingHorizontal: 12,
  },
  locationCard: {
    backgroundColor: '#F9FAFB',
    borderRadius: 12,
    padding: 12,
    marginHorizontal: 4,
    width: 100,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 1,
    elevation: 1,
  },
  locationIconContainer: {
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: '#EEF2FF',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 8,
  },
  locationName: {
    fontSize: 14,
    fontWeight: '500',
    color: '#4B5563',
    marginBottom: 4,
    textAlign: 'center',
  },
  locationDistance: {
    fontSize: 12,
    color: '#6B7280',
  },
  navigationInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F3F4F6',
    marginHorizontal: 16,
    borderRadius: 12,
    padding: 12,
  },
  navigationInfoIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#4F46E5',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  navigationInfoTextContainer: {
    flex: 1,
  },
  navigationInfoTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 4,
  },
  navigationInfoDescription: {
    fontSize: 12,
    color: '#6B7280',
  },
  navigationInfoButton: {
    backgroundColor: '#4F46E5',
    borderRadius: 6,
    paddingVertical: 6,
    paddingHorizontal: 12,
  },
  navigationInfoButtonText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  expandButton: {
    position: 'absolute',
    bottom: 20,
    left: width / 2 - 20,
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#4F46E5',
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
  },
});